1.Let us say your expense for every month are listed below,
   January - 2200
   February - 2350
   March - 2600
   April - 2130
   May - 2190
  Create a list to store these monthly expenses and using that find out,
1. In Feb, how many dollars you spent extra compare to January?
2. Find out your total expense in first quarter (first three months) of the year.
3. Find out if you spent exactly 2000 dollars in any month
4. June month just finished and your expense is 1980 dollar. Add this item to our monthly expense list
5. You returned an item that you bought in a month of April and
got a refund of 200$. Make a correction to your monthly expense list
based on this

SOLUTION :
list= [2200, 2350, 2600, 2130, 2190]
feb= list[1] - list[0]
print(feb)
Total_expense = list[0]+list[1]+list[2]
print(Total_expense)
for i in range(len(list)):
  if list[i]==2000:
      print(i)
list.append(1980)
print(list)
Refund_april =list[3]-200
list[3]=Refund_april
print(list)


2. You have a list of your favourite marvel super heros.
   heros=['spider man','thor','hulk','iron man','captain america']
   Using this find out,
1. Length of the list
2. Add 'black panther' at the end of this list
3. You realize that you need to add 'black panther' after 'hulk',
   so remove it from the list first and then add it after 'hulk'
4. Now you don't like thor and hulk because they get angry easily :)
   So you want to remove thor and hulk from list and replace them with doctor strange (because he is cool).
   Do that with one line of code.
5. Sort the heros list in alphabetical order (Hint. Use dir() functions to list down all functions available in list)

SOLUTION:
heros=['spider man','thor','hulk','iron man','captain america']
print(len(heros))
heros.append('black panther')
print(heros)
heros.pop()  # remove can also be used
heros.insert(3,'black panther')
print(heros)
heros[1:3]=['doctor strange']


3.Create a list of all odd numbers between 1 and a max number. Max number is something you need to take from a user using input() function

SOLUTION:
Max_num =int(input("enter a number:  "))
for i in range(Max_num):
   if i % 2 !=0:
      print(i)
OR
max = int(input("Enter max number: "))
odd_numbers = []
for i in range(1, max):
    if i % 2 == 1:
        odd_numbers.append(i)
print("Odd numbers: ", odd_numbers)
print(heros)
heros.sort()
print(heros)


4. find the smallest and largest element in an array 

SOLUTION:
def find_min_max(arr):
    if not arr:
        return None, None  # Handle empty list
    min_val = float('inf')
    max_val = -float('inf')

    for num in arr:
        if num < min_val:
            min_val = num # min_val=min(min_val,num)
        if num > max_val:
            max_val = num # max_val = max(num,max_val)
    return min_val, max_val

# Example usage
array = [10, 5, 3, 99, -20, 0, 67]
min_element, max_element = find_min_max(array)

print("Smallest element:", min_element)
print("Largest element:", max_element)

5. find the index of largest/smallest element in an array

SOLUTION:
def find_min_max_with_index(arr):
    if not arr:
        return None, None, None, None  # Handle empty list

    min_val = float('inf')
    max_val = -float('inf')
    min_idx= -1
    max_idx =1

    for i in range(len(arr)):
        if arr[i]<min_val:
            min_val=arr[i]
            min_idx=i

        if arr[i]>max_val:
            max_val=arr[i]
            max_idx=i
    return min_val, max_val, min_idx, max_idx

# Example usage
array = [10, 5, 3, 99, -20, 0, 67]
min_element, max_element, min_idx, max_idx= find_min_max_with_index(array)

print(f"found a smallest number: {min_element} at index {min_idx}")
print(f"found a largest number: {max_element} at index {max_idx}")

6.Linear search for an target in an given array # TC = 0(n)

SOLUTION:
def linearsearch(arr, size):
    for i in range (len(arr)):
        if arr[i]==target:
            return i
    return -1

arr=[7, 2, 4, 8, 1, 2, 5]
size=7
target=28
result= linearsearch(arr, size)

print(f"target found:{result}")

7. Reverse given array

SOLUTION:
def revers_array (arr, size):
    start=0
    end=size-1

    while (start< end):
        arr[start], arr[end] = arr[end],arr[start]
        start +=1
        end -=1
    return arr
arr=[20, 24, 28, 30, 32, 24]
size= 6 #len(arr)
result=revers_array (arr, size)
print(f"reversed array list:{result}")

8. WAF to find sum and product of all numbers in an array

SOLUTION:
def sum_of_arry(arr):
    res=0
    for i in range(len(arr)):
        res+=arr[i]
    return res

def product_of_arry(arr):
    res=1
    for i in range(len(arr)):
        res *= arr[i]
    return res

arr=[1, 2, 3, 4, 5]
sum_res=sum_of_arry(arr)
sum_product=product_of_arry(arr)

print(f"sum of elements in a list is: {sum_res}")
print(f"product of elements in a list is: {sum_product}")

9. WAF to swap min and max numbers of an array

SOLUTION:
def min_max(arr):
  min_val=  float('inf')
  max_val= -float('inf')

  for i in range(len(arr)):
    if arr[i]<min_val:
       min_val=arr[i]
    if arr[i]> max_val:
       max_val=arr[i]
       
  return min_val, max_val

arr=[1, 2, 3, 4, 5]
min_val, max_val=min_max(arr)
print(f"original min and max is: {min_val, max_val}")

min_val, max_val = max_val, min_val
print(f"After swap min and max is: {min_val, max_val}")

10. WAF to print all the unique values in an array

SOLUTION:
def unique_val(arr):         # TC =O(n2)
    unique=[]
    for i in range(len(arr)):
        is_unique=True
        for j in range(len(arr)):
            if i != j and arr[i] == arr[j]:
                is_unique= False
                break
        if is_unique:
            unique.append(arr[i])
    return unique if unique else -1

arr=[1, 2, 3, 4, 5, 3, 1]
res =unique_val(arr)

print(f"found unique element: {res}")

11. WAF to print intersection of 2 arrays

SOLUTION:
def intersection_Arry(arr1, arr2):   # TC=0(n2)
    res=[]
    for i in range(len(arr1)):
        for j in range(len(arr2)):
            if  arr1[i]==arr2[j] and arr1[i] not in res:
               res.append(arr1[i])
    return res if res else -1

arr1=[1, 2, 3, 5, 74]
arr2=[2, 1, 7, 74, 5]
res =intersection_Arry(arr1, arr2)

print(f"found common elements: {res}")

12. Return pair in sorted array with target sum

SOLUTION:
BF approach: 0(n2)

class Solution:
    def pairsum(self, nums, target):
     for i in range(len(nums)):
       for j in range(i+1, len(nums)):
            if (nums[i]+nums[j]==target):
                return target
     return  None
sol=Solution()
print(sol.pairsum([2,7,11,15], 29))

optimised approach : 0(n)

class Solution:
    def pairsum(self, nums, target):
     i=0
     j=len(nums)-1
     while(i<j):
       if (nums[i]+nums[j]>target):
         j-=1
       elif (nums[i]+nums[j]<target):
         i+=1
       else:
         return i,j
sol=Solution()
print(sol.pairsum([2,7,11,15], 26))

13. Majority element (Moore's Voting Algorithm)

SOLUTION:
class Solution:
    def majorityElement(self, nums):
        freq=0
        ans=0
        for num in nums:  #Moore's Voting Algorithm LOGIC
            if(freq==0):
              ans=num
            if(ans==num):
                freq+=1
            else:
                freq-=1
        if nums.count(ans) > len(nums) // 2:
            return ans
        else:
            return None  # No majority element
nums=[1,2,3,3,3,3,3,3,]
sol=Solution()
print(sol.majorityElement(nums))

USING sorting 

class Solution:
    def majorityElement(self, nums):
      nums.sort()
      freq = 1
      max_freq = 1
      ans = nums[0]
      for i in range(1, len(nums)):
        if nums[i] == nums[i - 1]:
             freq += 1
        else:
             freq = 1
        if freq > max_freq:
            max_freq = freq
            ans = nums[i]
      return ans

nums = [1, 1, 2, 2, 2, 2, 2, 2]
sol = Solution()
print(sol.majorityElement( nums)) 



